How did viewing a diff between two versions of a file help you see the bug that was introduced?

Actually at first I thought the program would just display the error only.  I was surprised but the
amount of stuff that was actually generated.  Once I realized what I was looking for is was easy to 
spot "spacr" as the typo.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

For one it allows you to try things.  You can try things knowing that if something goes wrong you can always go back to square 1.

What do you think are the pros and cons of manually choosing when to create a commit, like you do 
in Git, vs having versions automatically saved, like Google docs does?

The pros are easy.  When you manually commit you can do this when in logically makes sense to do
so.  As far as cons go you may be over confident of your changes and wait until several logical 
changes have taken place.  If your first logical change is wrong you may have to redo a significant
amount of work.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Program code is made up of multiple files that depend on one anohter.  Git is based on the version
control of program code so it is logical that multiple files will saved with each commit.  Google Docs, on the other hande, is a single file.  It does not have a relationship with other files therefore it is not necessary to copy other files.

How can you use the commands git log and git diff to view the history of files?

Well, git log gives you the "serial number", author, date and a subject line for every commit stored.  Using the "serial numbers" and git diff you are able to compare the differences between any two commits.

How might using version control make you more confident to make changes that could break something?

Version control allows you to go back.  If you make your commits in logical steps and something
stops working you can easily go back to the previous version and correct the but.  If it is 
something subtle and you don't catch it right away you can still pin point where the error 
occurred and update your latest file to back out the problem.

Now that you have your workspace set up, what do you wnat to try using Git for?

Well, I am not sure.  However I do look forward to using it with IOS for the next project.
